{"version":3,"sources":["components/Counter/index.js","components/Input/index.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","value","state","counter","this","interval","setInterval","setState","clearInterval","Component","Input","onChange","type","placeholder","App","working","input","className","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAmBaA,EAAb,kDACE,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GADW,IAETC,EAAUD,EAAVC,MAFS,OAGjB,EAAKC,MAAQ,CACXC,QAASF,GAJM,EADrB,qDASE,WAAqB,IAAD,OAClBG,KAAKC,SAAWC,aAAY,WAC1B,EAAKC,UAAS,kBAAkB,CAC9BJ,QADY,EAAGA,QACI,QAEpB,OAdP,kCAiBE,WACEK,cAAcJ,KAAKC,YAlBvB,oBAqBE,WAAU,IACAF,EAAYC,KAAKF,MAAjBC,QACR,OAAO,4BAAIA,GAAW,EAAI,WAAf,iBAA4BA,SAvB3C,GAA6BM,aCNhBC,EAAb,4JACE,WAAU,IAAD,EACqBN,KAAKJ,MAAzBC,EADD,EACCA,MAAOU,EADR,EACQA,SACf,OACE,uBACEC,KAAK,SACLX,MAAOA,EACPU,SAAUA,EACVE,YAAY,2BARpB,GAA2BJ,aCiEZK,E,kDAxCb,aAAe,IAAD,8BACZ,gBACKZ,MAAQ,CACXa,SAAS,EACTC,MAAO,IAJG,E,0CAQd,WAAU,IAAD,SACoBZ,KAAKF,MAAxBa,EADD,EACCA,QAASC,EADV,EACUA,MAEjB,OACE,sBAAKC,UAAU,MAAf,UACE,wCACA,8BACGF,EACC,cAAC,EAAD,CAASd,MAAOe,IAEhB,cAAC,EAAD,CACEf,MAAOe,EACPL,SAAU,gBAAaV,EAAb,EAAGiB,OAAUjB,MAAb,OACR,EAAKM,SAAS,CAAES,MAAOf,SAK/B,wBACEW,KAAK,SACLO,QAAS,WACHJ,GAAS,EAAKR,SAAS,CAAES,MAAO,KACpC,EAAKT,UAAS,kBAAkB,CAAEQ,SAApB,EAAGA,aAJrB,SAOGA,EAAU,oBAAsB,0B,GAlCzBN,aCzBHW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5c905a67.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import { useState, useEffect } from 'react';\n\n// COM HOOKS\n\n// export function Counter({ value }) {\n//   const [counter, setCounter] = useState(value);\n\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       setCounter((prevState) => prevState - 1);\n//     }, 1000);\n\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return <p>{counter <= 0 ? '⏳ 0' : `⏳ ${counter}`}</p>;\n// }\n\nexport class Counter extends Component {\n  constructor(props) {\n    super(props);\n    const { value } = props;\n    this.state = {\n      counter: value,\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState(({ counter }) => ({\n        counter: counter - 1,\n      }));\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const { counter } = this.state;\n    return <p>{counter <= 0 ? '⏳ 0' : `⏳ ${counter}`}</p>;\n  }\n}\n","import { Component } from 'react';\n\n// export function Input({ value, onChange }) {\n//   return (\n//     <input\n//       type=\"number\"\n//       value={value}\n//       onChange={onChange}\n//       placeholder=\"Insira os segundos\"\n//     />\n//   );\n// }\n\nexport class Input extends Component {\n  render() {\n    const { value, onChange } = this.props;\n    return (\n      <input\n        type=\"number\"\n        value={value}\n        onChange={onChange}\n        placeholder=\"Insira os segundos\"\n      />\n    );\n  }\n}\n","import React, { Component } from 'react';\n// import { useState } from 'react';\nimport './App.css';\nimport { Counter } from './components/Counter';\nimport { Input } from './components/Input';\n\n// USANDO HOOKS\n\n// function App() {\n//   const [working, setWorking] = useState(false);\n//   const [input, setInput] = useState('');\n\n//   return (\n//     <div className=\"App\">\n//       <div>\n//         {working ? (\n//           <Counter value={input} />\n//         ) : (\n//           <Input\n//             value={input}\n//             onChange={({ target: { value } }) => setInput(Number(value))}\n//           />\n//         )}\n//       </div>\n//       <button\n//         type=\"button\"\n//         onClick={() => {\n//           if (working) setInput('');\n//           setWorking((prevState) => !prevState);\n//         }}\n//       >\n//         {working ? 'Desligar contador' : 'Ligar contador'}\n//       </button>\n//     </div>\n//   );\n// }\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      working: false,\n      input: '',\n    };\n  }\n\n  render() {\n    const { working, input } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>TRYMER</h1>\n        <div>\n          {working ? (\n            <Counter value={input} />\n          ) : (\n            <Input\n              value={input}\n              onChange={({ target: { value } }) =>\n                this.setState({ input: value })\n              }\n            />\n          )}\n        </div>\n        <button\n          type=\"button\"\n          onClick={() => {\n            if (working) this.setState({ input: '' });\n            this.setState(({ working }) => ({ working: !working }));\n          }}\n        >\n          {working ? 'Desligar contador' : 'Ligar contador'}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}